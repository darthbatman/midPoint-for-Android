package com.example.nikhil.myapplication;import android.os.AsyncTask;import android.support.v7.app.ActionBarActivity;import android.os.Bundle;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.Button;import android.widget.ListAdapter;import android.widget.ListView;import android.widget.Toast;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import com.google.android.gms.maps.model.LatLng;public class AddLocations extends ActionBarActivity {    // References to GUI objects declared in XML    EditText addLocationET;    EditText typeET;    Button addToListViewButton;    Button submitButton;    ListView locationsListView;    // Some global (type) variables that may be needed in many functions    String userLocationInput;   // what the user enters in addLocationET    ArrayList userLocationInputArray = new ArrayList(); // array to hold all inputs    ArrayList latLngArray = new ArrayList();    // stores all the LatLngs after they are parsed; this is passed to map through SharedPrefs    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_add_locations);        // Initialize the references to GUI objects        addLocationET = (EditText) findViewById(R.id.addressEditText);        typeET = (EditText) findViewById(R.id.typeEditText);        addToListViewButton = (Button) findViewById(R.id.addButton);        submitButton = (Button) findViewById(R.id.submitButton);        locationsListView = (ListView) findViewById(R.id.listView);        userLocationInput = ""; // make sure its not null    }    // Button listener for the "addToListViewButton"    // This function does the following:    // 1. Get the user's input    // 2. Put it into the ListView    // 3. Geocode the user's input into a LatLng    // 4. Store said LatLng into a SharedPreferences - this same SharedPrefs will be used to plot the pins on the map later.    public void onAddButtonClick(View view) {        // 1. Get the user's input        userLocationInput = addLocationET.getText().toString();        // Add to the ArrayList        userLocationInputArray.add(userLocationInput);        // Create an ArrayAdapter to convert array into ListView & attach it to the ListView        ListAdapter adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, userLocationInputArray);        locationsListView.setAdapter(adapter);        // Access the GeocoderTask to geocode        GeocoderTask geocoderTask = new GeocoderTask();        geocoderTask.execute();    }    // AsyncTask to use the Google Geocoding API and turn "1600 Pennsylvania Ave." into a LatLng    public class GeocoderTask extends AsyncTask<String, Void, String> {        // This function does the following:        // 1. Establish an Internet connection        // 2. Connect to the Google servers        // 3. Send a GET request with the user input as a query        // 4. Parse the JSON output        // 5. Assign the parsed LatLng into an array        @Override        protected String doInBackground(String... params) {            HttpURLConnection urlConnection = null;            BufferedReader reader = null;            String unparsedJSON = "";            double latJSON;            double lngJSON;            try {                // Construct the URL                String baseURL = "https://maps.googleapis.com/maps/api/geocode/json?address=";//                String key = "&key=AIzaSyD1d02ZpWueGJM-WCc2pXmmU4p95DFRYm0";                String finalURL = baseURL + userLocationInput;                Log.i("Url for Geocoding: ", finalURL);                URL url = new URL(finalURL);                // open the connection                urlConnection = (HttpURLConnection) url.openConnection();                urlConnection.setRequestMethod("GET");                urlConnection.connect();                // Read in the input                InputStream inputStream = urlConnection.getInputStream();                StringBuffer buffer = new StringBuffer();                if (inputStream == null) {                    // nothing to do                    return null;                }                reader = new BufferedReader(new InputStreamReader(inputStream));                String line;                while ((line = reader.readLine()) != null) {                    buffer.append(line + "\n");                }                if (buffer.length() == 0) {                    // stream was empty, no point in parsing                    return null;                }                unparsedJSON = buffer.toString();            }            catch (IOException e) {                e.printStackTrace();            }            finally {                if (urlConnection != null) {                    urlConnection.disconnect();                }                if (reader != null) {                    try {                        reader.close();                    }                    catch (IOException e) {                        e.printStackTrace();                    }                }                Log.i("Full JSON Geocode", unparsedJSON);                // Now, we parse the JSON output:                try {                    JSONObject fullResults = new JSONObject(unparsedJSON);                    JSONArray results = fullResults.getJSONArray("results");                    JSONObject firstResult = results.getJSONObject(0);                    JSONObject geometry = firstResult.getJSONObject("geometry");                    JSONObject location = geometry.getJSONObject("location");                    latJSON = location.getDouble("lat");                    lngJSON = location.getDouble("lng");                    // Add the parsed LatLng object to the array                    LatLng parsedLatLng = new LatLng(latJSON, lngJSON);                    latLngArray.add(parsedLatLng);                    Log.i("LatLng of user input: ", Double.toString(latJSON) + " " + Double.toString(lngJSON));                }                catch (JSONException e) {                    e.printStackTrace();                }            }            // SOme shady cheese right here, i couldn't manipulate hte template params properly so this happened            return "";        }    }}