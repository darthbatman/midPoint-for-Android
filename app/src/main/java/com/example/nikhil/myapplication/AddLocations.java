package com.example.nikhil.myapplication;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.location.Address;import android.location.Criteria;import android.location.Geocoder;import android.location.Location;import android.location.LocationManager;import android.os.AsyncTask;import android.support.v7.app.ActionBarActivity;import android.os.Bundle;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.Button;import android.widget.ImageView;import android.widget.ListAdapter;import android.widget.ListView;import android.widget.Toast;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Locale;import java.util.Set;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.location.LocationServices;import com.google.android.gms.maps.model.LatLng;public class AddLocations extends ActionBarActivity {    // References to GUI objects declared in XML    EditText addLocationET;    EditText typeET;    ImageView addToListViewButton;    Button submitButton;    ListView locationsListView;    int globalCounter;  // used to generate new keys for the SharedPrefs (CANT ADD ARRAYS)    double currentInputLat; // what the user just entered, but geocoded    double currentInputLong; // these are passed to through the sharedPrefs    // Some variables that may be needed in many functions    String userLocationInput;   // what the user enters in addLocationET    ArrayList userLocationInputArray = new ArrayList(); // array to hold all String inputs    // Bundle to transfer info - screw the SharedPreferences    Bundle infoTransferBundle;    ArrayList<Double> infoTransferArray;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_add_locations);        // Initialize the references to GUI objects        addLocationET = (EditText) findViewById(R.id.addressEditText);        typeET = (EditText) findViewById(R.id.typeEditText);        addToListViewButton = (ImageView) findViewById(R.id.addButton);        submitButton = (Button) findViewById(R.id.submitButton);        locationsListView = (ListView) findViewById(R.id.listView);        userLocationInput = ""; // make sure its not null//        userLocationInputArray.add(""); // make sure its not null to avoid crashes        addLocationET.setText(""); // make sure its not null for the same reasons        infoTransferBundle = new Bundle();        infoTransferArray = new ArrayList<>();        // get user's location        getUserLocation();    }    private void getUserLocation(){        String towers;        LocationManager lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);        Criteria criteria = new Criteria();        towers = lm.getBestProvider(criteria, false);        Location userLocation = lm.getLastKnownLocation(towers);        if (userLocation != null) {            String lat = Double.toString(userLocation.getLatitude());            String longd = Double.toString(userLocation.getLongitude());            Log.d("User's Location: ", "Lat: " + lat + " Long: " + longd);        }        else            Log.d("User Location", "Failed to get user's location");    }    // Clears the listview    public void onClearButtonClick(View view) {        userLocationInputArray.clear();        ListAdapter adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, userLocationInputArray);        locationsListView.setAdapter(adapter);    }    // Button listener for the "addToListViewButton"    public void onAddButtonClick(View view) {        // 1. Get the user's input        userLocationInput = addLocationET.getText().toString();        userLocationInputArray.add(userLocationInput);        // Create an ArrayAdapter to convert array into ListView & attach it to the ListView//  ListAdapter adapter = new ArrayAdapter<String>(this, R.layout.listview_places, userLocationInputArray);        final PlacesListViewAdapter adapter = new PlacesListViewAdapter(this, userLocationInputArray);        locationsListView.setAdapter(adapter);        // if a user clicks an item, they can delete it        locationsListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {                AlertDialog.Builder builder = new AlertDialog.Builder(AddLocations.this, AlertDialog.THEME_HOLO_DARK);                builder.setTitle("Delete?");                builder.setMessage("Are you sure you want to delete " + userLocationInputArray.get(position) + "?");                builder.setPositiveButton("Ok", new AlertDialog.OnClickListener() {                    public void onClick (DialogInterface dialog, int which) {                        // Update the data                         userLocationInputArray.remove(position);                        TESTDEBUGgeocode();                        // update the display                        adapter.notifyDataSetChanged();                    } // end of onCLick                }); // end of setPositive button                builder.setNegativeButton("No", null);                builder.show();            } // end of onItemCLick        }); // end of setonitemclicklistener        // Prevents crashes (sike nah)        if (!(userLocationInput.equals("")) || (userLocationInput != null)) {            // For some reason, the fact that I was geocoding in an AsyncTask made the app crash.            // I had to move it back onto the main thread (unfortunately).            // It would have been more efficient running in the background.            // Maybe later I can get it to stop crashing on the background thread.            // Access the GeocoderTask to geocode//             GeocodeTask geocoderTask = new GeocodeTask();//             geocoderTask.execute();            TESTDEBUGgeocode();        }        // clear the EditText        addLocationET.setText("");    }    public void TESTDEBUGgeocode () {        Geocoder geocoder = new Geocoder(getApplicationContext(), Locale.getDefault());        if (!(userLocationInput.equals("")) && userLocationInput != null) {            try {                try {                    // List of addresses, we only use 1                    List<Address> addressList = geocoder.getFromLocationName(userLocationInput, 1);                    // if u dont not have results                    if (addressList != null) {//                        Toast.makeText(getApplicationContext(), "AddressList not null", Toast.LENGTH_LONG).show();                        // Get the first (and only) address in this list                        Address address = addressList.get(0);                        // If you don't not have results (ok)                        if (address != null) {                            Log.d("GeocoderTask: ", "Address is not null");                            // Get the latitude and longitude from the address object                            double DEBUGextraVariablesSuckLat = address.getLatitude();                            double DEBUGextraVariablesSuckLong = address.getLongitude();                            Log.i("Lat/Lng of Geocoded: ", Double.toString(DEBUGextraVariablesSuckLat) + " " + Double.toString(DEBUGextraVariablesSuckLong));                            // add that cheese to the array                            infoTransferArray.add(DEBUGextraVariablesSuckLat);                            infoTransferArray.add(DEBUGextraVariablesSuckLong);                        }                    }                } catch (IOException e) {                    e.printStackTrace();                }            }            catch (RuntimeException e) {                e.printStackTrace();                Toast.makeText(getApplicationContext(), "No results found for that location!", Toast.LENGTH_LONG).show();            }        }    }    // Submit button event handler    public void onSubmitButtonClick(View view) {        Intent intent = new Intent(this, MapsActivity.class);        if (infoTransferArray != null) {            // Turn the ArrayList of coordinates we stored everything in to an Array.            double[] doubleArray = new double[infoTransferArray.size()];            for (int i = 0; i < infoTransferArray.size(); i++) {                doubleArray[i] = infoTransferArray.get(i);            }////           // Turn the arraylist of names into an array//           String[] namesArray = new String[userLocationInputArray.size()];////           for (int i = 0; i < userLocationInputArray.size(); i++) {//               namesArray[i] = (String) userLocationInputArray.get(i);//               Log.d("Places Entered: ", namesArray[i]);//           }            infoTransferBundle.putDoubleArray("positions", doubleArray);            infoTransferBundle.putStringArrayList("place_names", userLocationInputArray);            intent.putExtra("bundle", infoTransferBundle);        }        startActivity(intent);    }    // Geocoding AsyncTask    public class GeocodeTask extends AsyncTask<Void, Void, Void> {        double extraVariablesSuckLat;        double extraVariablesSuckLong;        @Override        protected Void doInBackground(Void... params) {            Geocoder geocoder = new Geocoder(getApplicationContext(), Locale.getDefault());            if (!(userLocationInput.equals("")) && userLocationInput != null) {                try {                    try {                        // List of addresses, we only use 1                        List<Address> addressList = geocoder.getFromLocationName(userLocationInput, 1);                        // if u dont not have results                        if (addressList != null) {                            Toast.makeText(getApplicationContext(), "AddressList not null", Toast.LENGTH_LONG).show();                            // Get the first (and only) address in this list                            Address address = addressList.get(0);                            // If you don't not have results (ok)                            if (address != null) {                                Log.d("GeocoderTask: ", "Address is not null");                                // Get the latitude and longitude from the address object                                extraVariablesSuckLat = address.getLatitude();                                extraVariablesSuckLong = address.getLongitude();                                Log.i("Lat/Lng of Geocoded: ", Double.toString(extraVariablesSuckLat) + " " + Double.toString(extraVariablesSuckLong));                                // add that cheese to the array                                infoTransferArray.add(extraVariablesSuckLat);                                infoTransferArray.add(extraVariablesSuckLong);                            }                        }                    } catch (IOException e) {                        e.printStackTrace();                    }                }                catch (RuntimeException e) {                    e.printStackTrace();                    Toast.makeText(getApplicationContext(), "No results found for that location!", Toast.LENGTH_LONG).show();                }            }            return null;        }        @Override        protected void onPostExecute(Void aVoid) {            // I could maybe probably delete this...            currentInputLat = extraVariablesSuckLat;            currentInputLong = extraVariablesSuckLong;        }    }}